{"/home/travis/build/npmtest/node-npmtest-torrent/test.js":"/* istanbul instrument in package npmtest_torrent */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-torrent/lib.npmtest_torrent.js":"/* istanbul instrument in package npmtest_torrent */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_torrent = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_torrent = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-torrent/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-torrent && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_torrent */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_torrent\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_torrent.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_torrent.rollup.js'] =\n            local.assetsDict['/assets.npmtest_torrent.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_torrent.__dirname +\n                    '/lib.npmtest_torrent.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-torrent/node_modules/torrent/index.js":"var torrents = require('torrent-stream')\n\nmodule.exports = function (source, opts) {\n  var engine = torrents(source, opts)\n\n  engine.on('ready', function () {\n    engine.files.forEach(function (file) {\n      file.select()\n    })\n  })\n\n  return engine\n}\n","/home/travis/build/npmtest/node-npmtest-torrent/node_modules/torrent-stream/index.js":"var hat = require('hat')\nvar pws = require('peer-wire-swarm')\nvar bncode = require('bncode')\nvar crypto = require('crypto')\nvar bitfield = require('bitfield')\nvar parseTorrent = require('parse-torrent')\nvar mkdirp = require('mkdirp')\nvar events = require('events')\nvar path = require('path')\nvar fs = require('fs')\nvar os = require('os')\nvar eos = require('end-of-stream')\nvar piece = require('torrent-piece')\nvar rimraf = require('rimraf')\nvar FSChunkStore = require('fs-chunk-store')\nvar ImmediateChunkStore = require('immediate-chunk-store')\nvar peerDiscovery = require('torrent-discovery')\n\nvar blocklist = require('ip-set')\nvar exchangeMetadata = require('./lib/exchange-metadata')\nvar fileStream = require('./lib/file-stream')\n\nvar MAX_REQUESTS = 5\nvar CHOKE_TIMEOUT = 5000\nvar REQUEST_TIMEOUT = 30000\nvar SPEED_THRESHOLD = 3 * piece.BLOCK_LENGTH\nvar DEFAULT_PORT = 6881\n\nvar BAD_PIECE_STRIKES_MAX = 3\nvar BAD_PIECE_STRIKES_DURATION = 120000 // 2 minutes\n\nvar RECHOKE_INTERVAL = 10000\nvar RECHOKE_OPTIMISTIC_DURATION = 2\n\nvar TMP = fs.existsSync('/tmp') ? '/tmp' : os.tmpDir()\n\nvar noop = function () {}\n\nvar sha1 = function (data) {\n  return crypto.createHash('sha1').update(data).digest('hex')\n}\n\nvar thruthy = function () {\n  return true\n}\n\nvar falsy = function () {\n  return false\n}\n\nvar toNumber = function (val) {\n  return val === true ? 1 : (val || 0)\n}\n\nvar torrentStream = function (link, opts, cb) {\n  if (typeof opts === 'function') return torrentStream(link, null, opts)\n\n  link = parseTorrent(link)\n  var metadata = link.infoBuffer || null\n  var infoHash = link.infoHash\n\n  if (!opts) opts = {}\n  if (!opts.id) opts.id = '-TS0008-' + hat(48)\n  if (!opts.tmp) opts.tmp = TMP\n  if (!opts.name) opts.name = 'torrent-stream'\n  if (!opts.flood) opts.flood = 0 // Pulse defaults:\n  if (!opts.pulse) opts.pulse = Number.MAX_SAFE_INTEGER // Do not pulse\n\n  var usingTmp = false\n  var destroyed = false\n\n  if (!opts.path) {\n    usingTmp = true\n    opts.path = path.join(opts.tmp, opts.name, infoHash)\n  }\n\n  var engine = new events.EventEmitter()\n  var swarm = pws(infoHash, opts.id, { size: (opts.connections || opts.size), speed: 10 })\n  var torrentPath = path.join(opts.tmp, opts.name, infoHash + '.torrent')\n\n  if (cb) engine.on('ready', cb.bind(null, engine))\n\n  engine.ready = function (cb) {\n    if (engine.torrent) cb()\n    else engine.once('ready', cb)\n  }\n\n  var wires = swarm.wires\n  var critical = []\n  var refresh = noop\n\n  var rechokeSlots = (opts.uploads === false || opts.uploads === 0) ? 0 : (+opts.uploads || 10)\n  var rechokeOptimistic = null\n  var rechokeOptimisticTime = 0\n  var rechokeIntervalId\n\n  engine.infoHash = infoHash\n  engine.metadata = metadata\n  engine.path = opts.path\n  engine.files = []\n  engine.selection = []\n  engine.torrent = null\n  engine.bitfield = null\n  engine.amInterested = false\n  engine.store = null\n  engine.swarm = swarm\n  engine._flood = opts.flood\n  engine._pulse = opts.pulse\n\n  var discovery = peerDiscovery({\n    peerId: new Buffer(opts.id),\n    dht: (opts.dht !== undefined) ? opts.dht : true,\n    tracker: (opts.tracker !== undefined) ? opts.tracker : true,\n    port: DEFAULT_PORT,\n    announce: opts.trackers\n  })\n  var blocked = blocklist(opts.blocklist)\n\n  discovery.on('peer', function (addr) {\n    if (blocked.contains(addr.split(':')[0])) {\n      engine.emit('blocked-peer', addr)\n    } else {\n      engine.emit('peer', addr)\n      engine.connect(addr)\n    }\n  })\n\n  var ontorrent = function (torrent) {\n    var storage = opts.storage || FSChunkStore\n    engine.store = ImmediateChunkStore(storage(torrent.pieceLength, {\n      files: torrent.files.map(function (file) {\n        return {\n          path: path.join(opts.path, file.path),\n          length: file.length,\n          offset: file.offset\n        }\n      })\n    }))\n    engine.torrent = torrent\n    engine.bitfield = bitfield(torrent.pieces.length)\n\n    var pieceLength = torrent.pieceLength\n    var pieceRemainder = (torrent.length % pieceLength) || pieceLength\n\n    var pieces = torrent.pieces.map(function (hash, i) {\n      return piece(i === torrent.pieces.length - 1 ? pieceRemainder : pieceLength)\n    })\n    var reservations = torrent.pieces.map(function () {\n      return []\n    })\n\n    process.nextTick(function () {\n      // Gives the user a chance to call engine.listen(PORT) on the same tick,\n      // so discovery will start using the correct torrent port.\n      discovery.setTorrent(torrent)\n    })\n\n    engine.files = torrent.files.map(function (file) {\n      file = Object.create(file)\n      var offsetPiece = (file.offset / torrent.pieceLength) | 0\n      var endPiece = ((file.offset + file.length - 1) / torrent.pieceLength) | 0\n\n      file.deselect = function () {\n        engine.deselect(offsetPiece, endPiece, false)\n      }\n\n      file.select = function () {\n        engine.select(offsetPiece, endPiece, false)\n      }\n\n      file.createReadStream = function (opts) {\n        var stream = fileStream(engine, file, opts)\n\n        var notify = stream.notify.bind(stream)\n        engine.select(stream.startPiece, stream.endPiece, true, notify)\n        eos(stream, function () {\n          engine.deselect(stream.startPiece, stream.endPiece, true, notify)\n        })\n\n        return stream\n      }\n\n      return file\n    })\n\n    var oninterestchange = function () {\n      var prev = engine.amInterested\n      engine.amInterested = !!engine.selection.length\n\n      wires.forEach(function (wire) {\n        if (engine.amInterested) wire.interested()\n        else wire.uninterested()\n      })\n\n      if (prev === engine.amInterested) return\n      if (engine.amInterested) engine.emit('interested')\n      else engine.emit('uninterested')\n    }\n\n    var gc = function () {\n      for (var i = 0; i < engine.selection.length; i++) {\n        var s = engine.selection[i]\n        var oldOffset = s.offset\n\n        while (!pieces[s.from + s.offset] && s.from + s.offset < s.to) s.offset++\n\n        if (oldOffset !== s.offset) s.notify()\n        if (s.to !== s.from + s.offset) continue\n        if (pieces[s.from + s.offset]) continue\n\n        engine.selection.splice(i, 1)\n        i-- // -1 to offset splice\n        s.notify()\n        oninterestchange()\n      }\n\n      if (!engine.selection.length) engine.emit('idle')\n    }\n\n    var onpiececomplete = function (index, buffer) {\n      if (!pieces[index]) return\n\n      pieces[index] = null\n      reservations[index] = null\n      engine.bitfield.set(index, true)\n\n      for (var i = 0; i < wires.length; i++) wires[i].have(index)\n\n      engine.emit('verify', index)\n      engine.emit('download', index, buffer)\n\n      engine.store.put(index, buffer)\n      gc()\n    }\n\n    var onhotswap = opts.hotswap === false ? falsy : function (wire, index) {\n      var speed = wire.downloadSpeed()\n      if (speed < piece.BLOCK_LENGTH) return\n      if (!reservations[index] || !pieces[index]) return\n\n      var r = reservations[index]\n      var minSpeed = Infinity\n      var min\n\n      for (var i = 0; i < r.length; i++) {\n        var other = r[i]\n        if (!other || other === wire) continue\n\n        var otherSpeed = other.downloadSpeed()\n        if (otherSpeed >= SPEED_THRESHOLD) continue\n        if (2 * otherSpeed > speed || otherSpeed > minSpeed) continue\n\n        min = other\n        minSpeed = otherSpeed\n      }\n\n      if (!min) return false\n\n      for (i = 0; i < r.length; i++) {\n        if (r[i] === min) r[i] = null\n      }\n\n      for (i = 0; i < min.requests.length; i++) {\n        var req = min.requests[i]\n        if (req.piece !== index) continue\n        pieces[index].cancel((req.offset / piece.BLOCK_SIZE) | 0)\n      }\n\n      engine.emit('hotswap', min, wire, index)\n      return true\n    }\n\n    var onupdatetick = function () {\n      process.nextTick(onupdate)\n    }\n\n    var onrequest = function (wire, index, hotswap) {\n      if (!pieces[index]) return false\n\n      var p = pieces[index]\n      var reservation = p.reserve()\n\n      if (reservation === -1 && hotswap && onhotswap(wire, index)) reservation = p.reserve()\n      if (reservation === -1) return false\n\n      var r = reservations[index] || []\n      var offset = p.chunkOffset(reservation)\n      var size = p.chunkLength(reservation)\n\n      var i = r.indexOf(null)\n      if (i === -1) i = r.length\n      r[i] = wire\n\n      wire.request(index, offset, size, function (err, block) {\n        if (r[i] === wire) r[i] = null\n\n        if (p !== pieces[index]) return onupdatetick()\n\n        if (err) {\n          p.cancel(reservation)\n          onupdatetick()\n          return\n        }\n\n        if (!p.set(reservation, block, wire)) return onupdatetick()\n\n        var sources = p.sources\n        var buffer = p.flush()\n\n        if (sha1(buffer) !== torrent.pieces[index]) {\n          pieces[index] = piece(p.length)\n          engine.emit('invalid-piece', index, buffer)\n          onupdatetick()\n\n          sources.forEach(function (wire) {\n            var now = Date.now()\n\n            wire.badPieceStrikes = wire.badPieceStrikes.filter(function (strike) {\n              return (now - strike) < BAD_PIECE_STRIKES_DURATION\n            })\n\n            wire.badPieceStrikes.push(now)\n\n            if (wire.badPieceStrikes.length > BAD_PIECE_STRIKES_MAX) {\n              engine.block(wire.peerAddress)\n            }\n          })\n\n          return\n        }\n\n        onpiececomplete(index, buffer)\n        onupdatetick()\n      })\n\n      return true\n    }\n\n    var onvalidatewire = function (wire) {\n      if (wire.requests.length) return\n\n      for (var i = engine.selection.length - 1; i >= 0; i--) {\n        var next = engine.selection[i]\n        for (var j = next.to; j >= next.from + next.offset; j--) {\n          if (!wire.peerPieces[j]) continue\n          if (onrequest(wire, j, false)) return\n        }\n      }\n    }\n\n    var speedRanker = function (wire) {\n      var speed = wire.downloadSpeed() || 1\n      if (speed > SPEED_THRESHOLD) return thruthy\n\n      var secs = MAX_REQUESTS * piece.BLOCK_LENGTH / speed\n      var tries = 10\n      var ptr = 0\n\n      return function (index) {\n        if (!tries || !pieces[index]) return true\n\n        var missing = pieces[index].missing\n        for (; ptr < wires.length; ptr++) {\n          var other = wires[ptr]\n          var otherSpeed = other.downloadSpeed()\n\n          if (otherSpeed < SPEED_THRESHOLD) continue\n          if (otherSpeed <= speed || !other.peerPieces[index]) continue\n          if ((missing -= otherSpeed * secs) > 0) continue\n\n          tries--\n          return false\n        }\n\n        return true\n      }\n    }\n\n    var shufflePriority = function (i) {\n      var last = i\n      for (var j = i; j < engine.selection.length && engine.selection[j].priority; j++) {\n        last = j\n      }\n      var tmp = engine.selection[i]\n      engine.selection[i] = engine.selection[last]\n      engine.selection[last] = tmp\n    }\n\n    var select = function (wire, hotswap) {\n      if (wire.requests.length >= MAX_REQUESTS) return true\n\n      // Pulse, or flood (default)\n      if (swarm.downloaded > engine._flood && swarm.downloadSpeed() > engine._pulse) {\n        return true\n      }\n\n      var rank = speedRanker(wire)\n\n      for (var i = 0; i < engine.selection.length; i++) {\n        var next = engine.selection[i]\n        for (var j = next.from + next.offset; j <= next.to; j++) {\n          if (!wire.peerPieces[j] || !rank(j)) continue\n          while (wire.requests.length < MAX_REQUESTS && onrequest(wire, j, critical[j] || hotswap)) {}\n          if (wire.requests.length < MAX_REQUESTS) continue\n          if (next.priority) shufflePriority(i)\n          return true\n        }\n      }\n\n      return false\n    }\n\n    var onupdatewire = function (wire) {\n      if (wire.peerChoking) return\n      if (!wire.downloaded) return onvalidatewire(wire)\n      select(wire, false) || select(wire, true)\n    }\n\n    var onupdate = function () {\n      wires.forEach(onupdatewire)\n    }\n\n    var onwire = function (wire) {\n      wire.setTimeout(opts.timeout || REQUEST_TIMEOUT, function () {\n        engine.emit('timeout', wire)\n        wire.destroy()\n      })\n\n      if (engine.selection.length) wire.interested()\n\n      var timeout = CHOKE_TIMEOUT\n      var id\n\n      var onchoketimeout = function () {\n        if (swarm.queued > 2 * (swarm.size - swarm.wires.length) && wire.amInterested) return wire.destroy()\n        id = setTimeout(onchoketimeout, timeout)\n      }\n\n      wire.on('close', function () {\n        clearTimeout(id)\n      })\n\n      wire.on('choke', function () {\n        clearTimeout(id)\n        id = setTimeout(onchoketimeout, timeout)\n      })\n\n      wire.on('unchoke', function () {\n        clearTimeout(id)\n      })\n\n      wire.on('request', function (index, offset, length, cb) {\n        if (pieces[index]) return\n        engine.store.get(index, { offset: offset, length: length }, function (err, buffer) {\n          if (err) return cb(err)\n          engine.emit('upload', index, offset, length)\n          cb(null, buffer)\n        })\n      })\n\n      wire.on('unchoke', onupdate)\n      wire.on('bitfield', onupdate)\n      wire.on('have', onupdate)\n\n      wire.isSeeder = false\n\n      var i = 0\n      var checkseeder = function () {\n        if (wire.peerPieces.length !== torrent.pieces.length) return\n        for (; i < torrent.pieces.length; ++i) {\n          if (!wire.peerPieces[i]) return\n        }\n        wire.isSeeder = true\n      }\n\n      wire.on('bitfield', checkseeder)\n      wire.on('have', checkseeder)\n      checkseeder()\n\n      wire.badPieceStrikes = []\n\n      id = setTimeout(onchoketimeout, timeout)\n    }\n\n    var rechokeSort = function (a, b) {\n      // Prefer higher download speed\n      if (a.downSpeed !== b.downSpeed) return a.downSpeed > b.downSpeed ? -1 : 1\n      // Prefer higher upload speed\n      if (a.upSpeed !== b.upSpeed) return a.upSpeed > b.upSpeed ? -1 : 1\n      // Prefer unchoked\n      if (a.wasChoked !== b.wasChoked) return a.wasChoked ? 1 : -1\n      // Random order\n      return a.salt - b.salt\n    }\n\n    var onrechoke = function () {\n      if (rechokeOptimisticTime > 0) --rechokeOptimisticTime\n      else rechokeOptimistic = null\n\n      var peers = []\n\n      wires.forEach(function (wire) {\n        if (wire.isSeeder) {\n          if (!wire.amChoking) wire.choke()\n        } else if (wire !== rechokeOptimistic) {\n          peers.push({\n            wire: wire,\n            downSpeed: wire.downloadSpeed(),\n            upSpeed: wire.uploadSpeed(),\n            salt: Math.random(),\n            interested: wire.peerInterested,\n            wasChoked: wire.amChoking,\n            isChoked: true\n          })\n        }\n      })\n\n      peers.sort(rechokeSort)\n\n      var i = 0\n      var unchokeInterested = 0\n      for (; i < peers.length && unchokeInterested < rechokeSlots; ++i) {\n        peers[i].isChoked = false\n        if (peers[i].interested) ++unchokeInterested\n      }\n\n      if (!rechokeOptimistic && i < peers.length && rechokeSlots) {\n        var candidates = peers.slice(i).filter(function (peer) { return peer.interested })\n        var optimistic = candidates[(Math.random() * candidates.length) | 0]\n\n        if (optimistic) {\n          optimistic.isChoked = false\n          rechokeOptimistic = optimistic.wire\n          rechokeOptimisticTime = RECHOKE_OPTIMISTIC_DURATION\n        }\n      }\n\n      peers.forEach(function (peer) {\n        if (peer.wasChoked !== peer.isChoked) {\n          if (peer.isChoked) peer.wire.choke()\n          else peer.wire.unchoke()\n        }\n      })\n    }\n\n    var onready = function () {\n      swarm.on('wire', onwire)\n      swarm.wires.forEach(onwire)\n\n      refresh = function () {\n        process.nextTick(gc)\n        oninterestchange()\n        onupdate()\n      }\n\n      rechokeIntervalId = setInterval(onrechoke, RECHOKE_INTERVAL)\n\n      process.nextTick(function () {\n        engine.emit('ready')\n        refresh()\n      })\n    }\n\n    if (opts.verify === false) return onready()\n\n    engine.emit('verifying')\n\n    var loop = function (i) {\n      if (i >= torrent.pieces.length) return onready()\n      engine.store.get(i, function (_, buf) {\n        if (!buf || sha1(buf) !== torrent.pieces[i] || !pieces[i]) return loop(i + 1)\n        pieces[i] = null\n        engine.bitfield.set(i, true)\n        engine.emit('verify', i)\n        loop(i + 1)\n      })\n    }\n\n    loop(0)\n  }\n\n  var exchange = exchangeMetadata(engine, function (metadata) {\n    var buf = bncode.encode({\n      info: bncode.decode(metadata),\n      'announce-list': []\n    })\n\n    ontorrent(parseTorrent(buf))\n\n    mkdirp(path.dirname(torrentPath), function (err) {\n      if (err) return engine.emit('error', err)\n      fs.writeFile(torrentPath, buf, function (err) {\n        if (err) engine.emit('error', err)\n      })\n    })\n  })\n\n  swarm.on('wire', function (wire) {\n    engine.emit('wire', wire)\n    exchange(wire)\n    if (engine.bitfield) wire.bitfield(engine.bitfield)\n  })\n\n  swarm.pause()\n\n  if (link.files && engine.metadata) {\n    swarm.resume()\n    ontorrent(link)\n  } else {\n    fs.readFile(torrentPath, function (_, buf) {\n      if (destroyed) return\n      swarm.resume()\n\n      // We know only infoHash here, not full infoDictionary.\n      // But infoHash is enough to connect to trackers and get peers.\n      if (!buf) return discovery.setTorrent(link)\n\n      var torrent = parseTorrent(buf)\n\n      // Bad cache file - fetch it again\n      if (torrent.infoHash !== infoHash) return discovery.setTorrent(link)\n\n      if (!torrent.announce || !torrent.announce.length) {\n        opts.trackers = [].concat(opts.trackers || []).concat(link.announce || [])\n      }\n\n      engine.metadata = torrent.infoBuffer\n      ontorrent(torrent)\n    })\n  }\n\n  engine.critical = function (piece, width) {\n    for (var i = 0; i < (width || 1); i++) critical[piece + i] = true\n  }\n\n  engine.select = function (from, to, priority, notify) {\n    engine.selection.push({\n      from: from,\n      to: to,\n      offset: 0,\n      priority: toNumber(priority),\n      notify: notify || noop\n    })\n\n    engine.selection.sort(function (a, b) {\n      return b.priority - a.priority\n    })\n\n    refresh()\n  }\n\n  engine.deselect = function (from, to, priority, notify) {\n    notify = notify || noop\n    for (var i = 0; i < engine.selection.length; i++) {\n      var s = engine.selection[i]\n      if (s.from !== from || s.to !== to) continue\n      if (s.priority !== toNumber(priority)) continue\n      if (s.notify !== notify) continue\n      engine.selection.splice(i, 1)\n      i--\n      break\n    }\n\n    refresh()\n  }\n\n  engine.setPulse = function (bps) {\n    // Set minimum byte/second pulse starting now (dynamic)\n    // Eg. Start pulsing at minimum 312 KBps:\n    // engine.setPulse(312*1024)\n\n    engine._pulse = bps\n  }\n\n  engine.setFlood = function (b) {\n    // Set bytes to flood starting now (dynamic)\n    // Eg. Start flooding for next 10 MB:\n    // engine.setFlood(10*1024*1024)\n\n    engine._flood = b + swarm.downloaded\n  }\n\n  engine.setFloodedPulse = function (b, bps) {\n    // Set bytes to flood before starting a minimum byte/second pulse (dynamic)\n    // Eg. Start flooding for next 10 MB, then start pulsing at minimum 312 KBps:\n    // engine.setFloodedPulse(10*1024*1024, 312*1024)\n\n    engine.setFlood(b)\n    engine.setPulse(bps)\n  }\n\n  engine.flood = function () {\n    // Reset flood/pulse values to default (dynamic)\n    // Eg. Flood the network starting now:\n    // engine.flood()\n\n    engine._flood = 0\n    engine._pulse = Number.MAX_SAFE_INTEGER\n  }\n\n  engine.connect = function (addr) {\n    swarm.add(addr)\n  }\n\n  engine.disconnect = function (addr) {\n    swarm.remove(addr)\n  }\n\n  engine.block = function (addr) {\n    blocked.add(addr.split(':')[0])\n    engine.disconnect(addr)\n    engine.emit('blocking', addr)\n  }\n\n  var removeTorrent = function (cb) {\n    fs.unlink(torrentPath, function (err) {\n      if (err) return cb(err)\n      fs.rmdir(path.dirname(torrentPath), function (err) {\n        if (err && err.code !== 'ENOTEMPTY') return cb(err)\n        cb()\n      })\n    })\n  }\n\n  var removeTmp = function (cb) {\n    if (!usingTmp) return removeTorrent(cb)\n    rimraf(opts.path, function (err) {\n      if (err) return cb(err)\n      removeTorrent(cb)\n    })\n  }\n\n  engine.remove = function (keepPieces, cb) {\n    if (typeof keepPieces === 'function') {\n      cb = keepPieces\n      keepPieces = false\n    }\n\n    if (keepPieces || !engine.store || !engine.store.destroy) return removeTmp(cb)\n\n    engine.store.destroy(function (err) {\n      if (err) return cb(err)\n      removeTmp(cb)\n    })\n  }\n\n  engine.destroy = function (cb) {\n    destroyed = true\n    swarm.destroy()\n    clearInterval(rechokeIntervalId)\n    discovery.stop()\n    if (engine.store && engine.store.close) {\n      engine.store.close(cb)\n    } else if (cb) {\n      process.nextTick(cb)\n    }\n  }\n\n  var findPort = function (def, cb) {\n    var net = require('net')\n    var s = net.createServer()\n\n    s.on('error', function () {\n      findPort(0, cb)\n    })\n\n    s.listen(def, function () {\n      var port = s.address().port\n      s.close(function () {\n        engine.listen(port, cb)\n      })\n    })\n  }\n\n  engine.listen = function (port, cb) {\n    if (typeof port === 'function') return engine.listen(0, port)\n    if (!port) return findPort(opts.port || DEFAULT_PORT, cb)\n    engine.port = port\n    swarm.listen(engine.port, cb)\n    discovery.updatePort(engine.port)\n  }\n\n  return engine\n}\n\nmodule.exports = torrentStream\n","/home/travis/build/npmtest/node-npmtest-torrent/node_modules/torrent-piece/index.js":"module.exports = Piece\n\nvar BLOCK_LENGTH = 1 << 14\n\nfunction Piece (length) {\n  if (!(this instanceof Piece)) return new Piece(length)\n\n  this.length = length\n  this.missing = length\n  this.sources = null\n\n  this._chunks = Math.ceil(length / BLOCK_LENGTH)\n  this._remainder = (length % BLOCK_LENGTH) || BLOCK_LENGTH\n  this._buffered = 0\n  this._buffer = null\n  this._cancellations = null\n  this._reservations = 0\n  this._flushed = false\n}\n\nPiece.BLOCK_LENGTH = BLOCK_LENGTH\n\nPiece.prototype.chunkLength = function (i) {\n  return i === this._chunks - 1 ? this._remainder : BLOCK_LENGTH\n}\n\nPiece.prototype.chunkLengthRemaining = function (i) {\n  return this.length - (i * BLOCK_LENGTH)\n}\n\nPiece.prototype.chunkOffset = function (i) {\n  return i * BLOCK_LENGTH\n}\n\nPiece.prototype.reserve = function () {\n  if (!this.init()) return -1\n  if (this._cancellations.length) return this._cancellations.pop()\n  if (this._reservations < this._chunks) return this._reservations++\n  return -1\n}\n\nPiece.prototype.reserveRemaining = function () {\n  if (!this.init()) return -1\n  if (this._reservations < this._chunks) {\n    var min = this._reservations\n    this._reservations = this._chunks\n    return min\n  }\n  return -1\n}\n\nPiece.prototype.cancel = function (i) {\n  if (!this.init()) return\n  this._cancellations.push(i)\n}\n\nPiece.prototype.cancelRemaining = function (i) {\n  if (!this.init()) return\n  this._reservations = i\n}\n\nPiece.prototype.get = function (i) {\n  if (!this.init()) return null\n  return this._buffer[i]\n}\n\nPiece.prototype.set = function (i, data, source) {\n  if (!this.init()) return false\n  var len = data.length\n  var blocks = Math.ceil(len / BLOCK_LENGTH)\n  for (var j = 0; j < blocks; j++) {\n    if (!this._buffer[i + j]) {\n      var offset = j * BLOCK_LENGTH\n      var splitData = data.slice(offset, offset + BLOCK_LENGTH)\n      this._buffered++\n      this._buffer[i + j] = splitData\n      this.missing -= splitData.length\n      if (this.sources.indexOf(source) === -1) {\n        this.sources.push(source)\n      }\n    }\n  }\n  return this._buffered === this._chunks\n}\n\nPiece.prototype.flush = function () {\n  if (!this._buffer || this._chunks !== this._buffered) return null\n  var buffer = Buffer.concat(this._buffer, this.length)\n  this._buffer = null\n  this._cancellations = null\n  this.sources = null\n  this._flushed = true\n  return buffer\n}\n\nPiece.prototype.init = function () {\n  if (this._flushed) return false\n  if (this._buffer) return true\n  this._buffer = new Array(this._chunks)\n  this._cancellations = []\n  this.sources = []\n  return true\n}\n","/home/travis/build/npmtest/node-npmtest-torrent/node_modules/torrent-discovery/index.js":"module.exports = Discovery\n\nvar debug = require('debug')('torrent-discovery')\nvar DHT = require('bittorrent-dht/client') // empty object in browser\nvar EventEmitter = require('events').EventEmitter\nvar extend = require('xtend')\nvar inherits = require('inherits')\nvar parallel = require('run-parallel')\nvar reemit = require('re-emitter')\nvar Tracker = require('bittorrent-tracker/client')\n\ninherits(Discovery, EventEmitter)\n\nfunction Discovery (opts) {\n  var self = this\n  if (!(self instanceof Discovery)) return new Discovery(opts)\n  EventEmitter.call(self)\n\n  self.announce = opts.announce || []\n  self.rtcConfig = opts.rtcConfig // browser only\n  self.peerId = opts.peerId\n  self.port = opts.port || 0 // torrent port\n  self.wrtc = opts.wrtc\n  self.intervalMs = opts.intervalMs || (15 * 60 * 1000)\n  self.destroyed = false\n\n  if (!self.peerId) throw new Error('peerId required')\n  if (!process.browser && !self.port) throw new Error('port required')\n\n  self.infoHash = null\n  self.infoHashBuffer = null\n  self.torrent = null\n\n  self._dhtAnnouncing = false\n  self._dhtTimeout = false\n  self._internalDHT = false // is the DHT created internally?\n\n  if (opts.tracker === false) {\n    self.tracker = false\n  } else {\n    self.tracker = true\n  }\n\n  if (opts.dht === false) {\n    self.dht = false\n  } else if (typeof opts.dht === 'object') {\n    self.dht = opts.dht\n  } else {\n    self.dht = createDHT()\n  }\n\n  if (self.dht) {\n    self.dht.on('peer', onPeer)\n  }\n\n  function createDHT () {\n    if (typeof DHT !== 'function') return false\n    self._internalDHT = true\n    var dht = new DHT()\n    reemit(dht, self, ['error', 'warning'])\n    dht.listen(opts.dhtPort)\n    return dht\n  }\n\n  function onPeer (peer, infoHash) {\n    if (infoHash.toString('hex') !== self.infoHash) return\n    self.emit('peer', peer.host + ':' + peer.port)\n  }\n}\n\nDiscovery.prototype.setTorrent = function (torrent) {\n  var self = this\n\n  if (!self.infoHash && (typeof torrent === 'string' || Buffer.isBuffer(torrent))) {\n    self.infoHash = typeof torrent === 'string'\n      ? torrent\n      : torrent.toString('hex')\n  } else if (!self.torrent && torrent && torrent.infoHash) {\n    self.torrent = torrent\n    self.infoHash = typeof torrent.infoHash === 'string'\n      ? torrent.infoHash\n      : torrent.infoHash.toString('hex')\n  } else {\n    return\n  }\n  self.infoHashBuffer = new Buffer(self.infoHash, 'hex')\n\n  debug('setTorrent %s', self.infoHash)\n\n  // If tracker exists, then it was created with just infoHash. Set torrent length\n  // so client can report correct information about uploads.\n  if (self.tracker && self.tracker !== true) {\n    self.tracker.torrentLength = torrent.length\n  } else {\n    self._createTracker()\n  }\n\n  self._dhtAnnounce()\n}\n\nDiscovery.prototype.updatePort = function (port) {\n  var self = this\n  if (port === self.port) return\n  self.port = port\n\n  self._dhtAnnounce()\n\n  if (self.tracker && self.tracker !== true) {\n    self.tracker.stop()\n    self.tracker.destroy(function () {\n      self._createTracker()\n    })\n  }\n}\n\nDiscovery.prototype.stop = function (cb) {\n  var self = this\n  self.destroyed = true\n  clearTimeout(self._dhtTimeout)\n\n  var tasks = []\n\n  if (self.tracker && self.tracker !== true) {\n    self.tracker.stop()\n    tasks.push(function (cb) {\n      self.tracker.destroy(cb)\n    })\n  }\n\n  if (self._internalDHT) {\n    tasks.push(function (cb) {\n      self.dht.destroy(cb)\n    })\n  }\n  parallel(tasks, cb)\n}\n\nDiscovery.prototype._createTracker = function () {\n  var self = this\n  if (!self.tracker) return\n\n  var torrent = self.torrent\n    ? extend({ announce: [] }, self.torrent)\n    : { infoHash: self.infoHash, announce: [] }\n\n  if (self.announce) torrent.announce = torrent.announce.concat(self.announce)\n\n  var trackerOpts = {\n    rtcConfig: self.rtcConfig,\n    wrtc: self.wrtc\n  }\n\n  self.tracker = new Tracker(self.peerId, self.port, torrent, trackerOpts)\n  reemit(self.tracker, self, ['peer', 'warning', 'error'])\n  self.tracker.setInterval(self.intervalMs)\n  self.tracker.on('update', onUpdate)\n  self.tracker.start()\n\n  function onUpdate (data) {\n    self.emit('trackerAnnounce', data)\n  }\n}\n\nDiscovery.prototype._dhtAnnounce = function () {\n  var self = this\n  if (!self.port || !self.infoHash || !self.dht || self._dhtAnnouncing) return\n  debug('dht announce')\n\n  self._dhtAnnouncing = true\n  clearTimeout(self._dhtTimeout)\n\n  self.dht.announce(self.infoHash, self.port, function (err) {\n    self._dhtAnnouncing = false\n    debug('dht announce complete')\n\n    if (err) self.emit('warning', err)\n    self.emit('dhtAnnounce')\n\n    if (!self.destroyed) {\n      self._dhtTimeout = setTimeout(function () {\n        self._dhtAnnounce()\n      }, getRandomTimeout())\n    }\n  })\n\n  // Returns timeout interval, with some random jitter\n  function getRandomTimeout () {\n    return self.intervalMs + Math.floor(Math.random() * self.intervalMs / 5)\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-torrent/node_modules/torrent-stream/lib/exchange-metadata.js":"var bncode = require('bncode')\nvar crypto = require('crypto')\n\nvar METADATA_BLOCK_SIZE = 1 << 14\nvar METADATA_MAX_SIZE = 1 << 22\nvar EXTENSIONS = {\n  m: {\n    ut_metadata: 1\n  }\n}\n\nvar sha1 = function (data) {\n  return crypto.createHash('sha1').update(data).digest('hex')\n}\n\nmodule.exports = function (engine, callback) {\n  var metadataPieces = []\n\n  return function (wire) {\n    var metadata = engine.metadata\n    wire.once('extended', function (id, handshake) {\n      try {\n        handshake = bncode.decode(handshake)\n      } catch (err) {\n        return\n      }\n\n      if (id || !handshake.m || handshake.m.ut_metadata === undefined) return\n\n      var channel = handshake.m.ut_metadata\n      var size = handshake.metadata_size\n\n      wire.on('extended', function (id, ext) {\n        if (id !== EXTENSIONS.m.ut_metadata) return\n\n        var metadata = engine.metadata\n        var delimiter, message, piece\n        try {\n          delimiter = ext.toString('ascii').indexOf('ee')\n          message = bncode.decode(ext.slice(0, delimiter === -1 ? ext.length : delimiter + 2))\n          piece = message.piece\n        } catch (err) {\n          return\n        }\n\n        if (piece < 0) return\n        if (message.msg_type === 2) return\n\n        if (message.msg_type === 0) {\n          if (!metadata) return wire.extended(channel, {msg_type: 2, piece: piece})\n          var offset = piece * METADATA_BLOCK_SIZE\n          var buf = metadata.slice(offset, offset + METADATA_BLOCK_SIZE)\n          wire.extended(channel, Buffer.concat([bncode.encode({msg_type: 1, piece: piece}), buf]))\n          return\n        }\n\n        if (message.msg_type === 1 && !metadata) {\n          metadataPieces[piece] = ext.slice(delimiter + 2)\n          for (var i = 0; i * METADATA_BLOCK_SIZE < size; i++) {\n            if (!metadataPieces[i]) return\n          }\n\n          metadata = Buffer.concat(metadataPieces)\n\n          if (engine.infoHash !== sha1(metadata)) {\n            metadataPieces = []\n            metadata = null\n            return\n          }\n\n          callback(engine.metadata = metadata)\n        }\n      })\n\n      if (size > METADATA_MAX_SIZE) return\n      if (!size || metadata) return\n\n      for (var i = 0; i * METADATA_BLOCK_SIZE < size; i++) {\n        if (metadataPieces[i]) continue\n        wire.extended(channel, {msg_type: 0, piece: i})\n      }\n    })\n\n    if (!wire.peerExtensions.extended) return\n    wire.extended(0, metadata ? {m: {ut_metadata: 1}, metadata_size: metadata.length} : {m: {ut_metadata: 1}})\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-torrent/node_modules/torrent-stream/lib/file-stream.js":"var stream = require('stream')\nvar util = require('util')\n\nvar FileStream = function (engine, file, opts) {\n  if (!(this instanceof FileStream)) return new FileStream(engine, file, opts)\n  stream.Readable.call(this)\n\n  if (!opts) opts = {}\n  if (!opts.start) opts.start = 0\n  if (!opts.end && typeof opts.end !== 'number') opts.end = file.length - 1\n\n  var offset = opts.start + file.offset\n  var pieceLength = engine.torrent.pieceLength\n\n  this.length = opts.end - opts.start + 1\n  this.startPiece = (offset / pieceLength) | 0\n  this.endPiece = ((opts.end + file.offset) / pieceLength) | 0\n  this._destroyed = false\n  this._engine = engine\n  this._piece = this.startPiece\n  this._missing = this.length\n  this._reading = false\n  this._notifying = false\n  this._critical = Math.min(1024 * 1024 / pieceLength, 2) | 0\n  this._offset = offset - this.startPiece * pieceLength\n}\n\nutil.inherits(FileStream, stream.Readable)\n\nFileStream.prototype._read = function () {\n  if (this._reading) return\n  this._reading = true\n  this.notify()\n}\n\nFileStream.prototype.notify = function () {\n  if (!this._reading || !this._missing) return\n  if (!this._engine.bitfield.get(this._piece)) return this._engine.critical(this._piece, this._critical)\n\n  var self = this\n\n  if (this._notifying) return\n  this._notifying = true\n  this._engine.store.get(this._piece++, function (err, buffer) {\n    self._notifying = false\n\n    if (self._destroyed || !self._reading) return\n\n    if (err) return self.destroy(err)\n\n    if (self._offset) {\n      buffer = buffer.slice(self._offset)\n      self._offset = 0\n    }\n\n    if (self._missing < buffer.length) buffer = buffer.slice(0, self._missing)\n\n    self._missing -= buffer.length\n\n    if (!self._missing) {\n      self.push(buffer)\n      self.push(null)\n      return\n    }\n\n    self._reading = false\n    self.push(buffer)\n  })\n}\n\nFileStream.prototype.destroy = function () {\n  if (this._destroyed) return\n  this._destroyed = true\n  this.emit('close')\n}\n\nmodule.exports = FileStream\n"}